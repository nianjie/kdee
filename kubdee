#!/usr/bin/env fish

# Global constants
set kubdee_dir $HOME/.local/share/kubdee
set kubdee_version (git describe --tags --always --dirty)
set kubdee_version dev
set kubdee_cache_dir "$kubdee_dir/cache/$kubdee_version"
set kubdee_container_image kubdee-container-image-(string replace -a -r [._] - -- $kubdee_version)
set image_bases alpine ubuntu
set image_base $image_bases[1]
if test local = (incus remote get-default)
  set container_image_share_directory $kubdee_dir/images-repo
  command mkdir -p $container_image_share_directory
else
  set container_image_share_directory /home/ubuntu/.local/share/kubdee/images-repo
end
# Option defaults
set k3s_version v1.28.3+k3s1
set num_worker 2
set no_set_context false
set local_k3s_binary

source lib.fish

function exit_usage
  set command_name $argv[1]
  echo "
  kubdee Version: $kubdee_version
  Usage:
    $command_name [options] controller-ip <cluster name>     print the IPv4 address of the controller node
    $command_name [options] create <cluster name>            create a cluster
    $command_name [options] delete <cluster name>            delete a cluster
    $command_name [options] list                             list all clusters
    $command_name [options] smoke-test <cluster name>        smoke test a cluster
    $command_name [options] start <cluster name>             start a cluster
    $command_name [options] start-worker <cluster name>      start a new worker node in a cluster
    $command_name [options] up <cluster name>                create + start in one command
    $command_name [options] forward <ip address> <cluster name> listen on the specified address to forward requests to cluster
    $command_name [options] version                          print kubdee version and exit
  
  Options:
    --k3s-version <version>                           the release of K3s to install, for example 'v1.28.3+k3s1'
    --num-worker <num>                                number of worker nodes to start (default: 2)
    --no-set-context                                  prevent curent `.kube/config` from being replaced
    --local-k3s-binary <path>                         install with specified k3s binary instead of fetching from internet (sort of offline)
    --image-base                                      specify base image. possible options are : "(string join ', ' $image_bases)". default is `$image_bases[1]`.
    --help                                            print this information
  "
    exit 0
end

function cmd_create
  set -l cluster_name $argv[1]
  test -z $cluster_name; and set cluster_name kubdee
  set cluster_name (validate_name $cluster_name)
  test -d $kubdee_dir/clusters/$cluster_name
  and exit_error "Found existing cluster with name: $cluster_name" 1
  log_info "Creating cluster $cluster_name ..."
  fetch_k3s_binaries $cluster_name $local_k3s_binary
  command mkdir -p $kubdee_dir/clusters/$cluster_name
  create_storage_pool $cluster_name
  prepare_container_image $cluster_name
  log_success "Cluster $cluster_name created."
end

function cmd_start
  set -l cluster_name $argv[1]
  test -z $cluster_name; and set cluster_name kubdee
  set cluster_name (validate_name $cluster_name)
  test -d $kubdee_dir/clusters/$cluster_name
  or exit_error "Found no cluster with name: $cluster_name - did you create it?" 1
  log_info "Starting cluster $cluster_name ..."
  launch_container $cluster_name kubdee-$cluster_name-controller
  set -l worker_suffixes
  for i in (seq $num_worker);
    set -a worker_suffixes (openssl rand -base64 10 | tr -cd 'a-z0-9' | head -c 6 || true)
  end
  for i in (seq $num_worker);
    launch_container $cluster_name kubdee-$cluster_name-worker-$worker_suffixes[$i]
  end
  configure_controller $cluster_name kubdee-$cluster_name-controller $admission_plugins
  for i in (seq $num_worker);
    configure_worker $cluster_name kubdee-$cluster_name-worker-$worker_suffixes[$i]
  end
  test $no_set_context = false ;and which kubectl &>/dev/null
  and configure_kubeconfig $cluster_name
  log_success "Cluster $cluster_name started."
end

function cmd_start-worker
  set -l cluster_name $argv[1]
  test -z $cluster_name; and set cluster_name kubdee
  set cluster_name (validate_name $cluster_name)
  test -d $kubdee_dir/clusters/$cluster_name
  or exit_error "Found no cluster with name: $cluster_name - did you create it?" 1
  prepare_container_image $cluster_name
  set -l worker_suffixes (openssl rand -base64 10 | tr -cd 'a-z0-9' | head -c 6 || true)
  launch_container $cluster_name kubdee-$cluster_name-worker-$worker_suffixes
  configure_worker $cluster_name kubdee-$cluster_name-worker-$worker_suffixes
  log_success "Node kubdee-$cluster_name-worker-$worker_suffixes started."
end

function cmd_smoke-test
  echo Not Implemented.
end

function cmd_version
  echo kubdee version: $kubdee_version
  echo K3s version: $k3s_version
  echo incus version: $incus_driver_version
end

function cmd_list
  command mkdir -p "$kubdee_dir/clusters/"
  find "$kubdee_dir/clusters/" -mindepth 1 -maxdepth 1 -type d -exec basename {} \;
end

function cmd_controller-ip
  set -l cluster_name $argv[1]
  test -z $cluster_name; and set cluster_name kubdee
  set cluster_name (validate_name $cluster_name)
  test -d $kubdee_dir/clusters/$cluster_name
  or exit_error "Found no cluster with name: $cluster_name - did you create it?" 1
  set -l container_name kubdee-$cluster_name-controller
  container_ipv4_address $container_name
end

function cmd_delete
  set -l cluster_name $argv[1]
  set cluster_name (validate_name $cluster_name)
  test -d $kubdee_dir/clusters/$cluster_name
  or exit_error "Found no cluster with name: $cluster_name" 1
  log_info "Deleting cluster $cluster_name ..."
  for c in (incus list --format json | jq -r '.[].name')
    if string match -q -e "kubdee-$cluster_name-" $c
      incus delete -f "$c"
    end
  end
  rm -rf $kubdee_dir/clusters/$cluster_name
end

function cmd_forward
  set -l ip_forwarding $argv[1]
  set -l cluster_name $argv[2]
  test -z $cluster_name; and set cluster_name kubdee
  set cluster_name (validate_name $cluster_name)
  test -d $kubdee_dir/clusters/$cluster_name
  or exit_error "Found no cluster with name: $cluster_name - did you create it?" 1
  set -l container_name kubdee-$cluster_name-controller
  if test -n "$ip_forwarding"
    set -l network (incus list --format json |jq -r ".[] |select(.name==\"$container_name\").expanded_devices.eth0.network")
    if not contains $ip_forwarding (incus network forward list $network --format json |jq -r '.[].listen_address')
      incus network forward create $network $ip_forwarding
    end
    incus network forward set $network $ip_forwarding target_address=(container_ipv4_address $container_name)
    log_info 'network forward completed.'
  end
end

function main
  argparse h/help k/k3s-version= n/num-worker= u-no-set-context l/local-k3s-binary= i/image-base= -- $argv
  or begin
      echo "See `kubdee --help` for help" >&2
      exit 1
  end

  if set -ql _flag_help
    exit_usage (basename (status filename))
  end
  
  if set -ql _flag_k3s_version
    set k3s_version $_flag_k3s_version
  end
  
  if set -ql _flag_no_set_context
    set no_set_context true
  end
  
  if set -ql _flag_num_worker
    test $_flag_num_worker -ge 0 ; or exit_error "Number of worker nodes must be a positive integer: $_flag_num_worker"
    set num_worker $_flag_num_worker
  end
  
  if set -ql _flag_local_k3s_binary
    test -e $_flag_local_k3s_binary ; or exit_error "Specified local k3s binary not exist: $_flag_local_k3s_binary"
    set local_k3s_binary $_flag_local_k3s_binary
  end

  if set -ql _flag_image_base
    if contains $_flag_image_base $image_bases
      set image_base $_flag_image_base
    else
      log_error "Only following image bases are supported: "(string join ', ' $image_bases)". The default `$image_bases[1]` will be used."
    end
  end
  source lib-$image_base.fish

  set -l cmd $argv[1]
  if contains "$cmd" create start start-worker smoke-test list controller-ip delete version forward
    cmd_$cmd $argv[2..]
  else if test "$cmd" = up
    cmd_create $argv[2..]
    cmd_start $argv[2..]
  else
    echo "Unknown command: $cmd" >&2
    echo "See `kubdee --help` for help" >&2
    exit 1
  end
end

main $argv