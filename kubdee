#!/usr/bin/env fish

# Global constants
set kubdee_dir $HOME/.local/share/kubdee
set kubdee_version (git describe --tags --always --dirty)
set kubdee_version dev
set kubdee_base_image images:ubuntu/jammy/cloud
set kubdee_container_image kubdee-container-image-(string replace -a -r [._] - -- $kubdee_version)

# Option defaults
set kubdee_cache_dir "$kubdee_dir/cache/$kubdee_version"
set k3s_version v1.28.3+k3s1
set num_worker 2

source lib.fish

function cmd_create
  set -l cluster_name $argv[1]
  test -z $cluster_name; and set cluster_name kubdee
  set cluster_name (validate_name $cluster_name)
  test -d $kubdee_dir/clusters/$cluster_name
  and exit_error "Found existing cluster with name: $cluster_name" 1
  mkdir -p $kubdee_dir/clusters/$cluster_name
  fetch_k3s_binaries $cluster_name
  create_storage_pool $cluster_name
  prepare_container_image $cluster_name
end

function cmd_start
  set -l cluster_name $argv[1]
  test -z $cluster_name; and set cluster_name kubdee
  set cluster_name (validate_name $cluster_name)
  test -d $kubdee_dir/clusters/$cluster_name
  or exit_error "Found no cluster with name: $cluster_name - did you create it?" 1
  log_info "Starting cluster $cluster_name ..."
  launch_container $cluster_name kubdee-$cluster_name-controller
  set -l worker_suffixes
  for i in (seq $num_worker);
    set -a worker_suffixes (tr -cd 'a-z0-9' </dev/urandom | head -c 6 || true)
  end
  for i in (seq $num_worker);
    launch_container $cluster_name kubdee-$cluster_name-worker-$worker_suffixes[$i]
  end
  configure_controller $cluster_name kubdee-$cluster_name-controller $admission_plugins
  for i in (seq $num_worker);
    configure_worker $cluster_name kubdee-$cluster_name-worker-$worker_suffixes[$i]
  end
  log_info "Started cluster $cluster_name."
end

function cmd_delete
  set -l cluster_name $argv[1]
  set cluster_name (validate_name $cluster_name)
  test -d $kubdee_dir/clusters/$cluster_name
  or exit_error "Found no cluster with name: $cluster_name" 1
  log_info "Deleting cluster $cluster_name ..."
  for c in (incus list --format json | jq -r '.[].name')
    if string match -q -e "kubdee-$cluster_name-" $c
      incus delete -f "$c"
    end
  end
  rm -rf $kubdee_dir/clusters/$cluster_name
end

function main
  argparse h/help -- $argv

  if set -ql _flag_help
    exit_usage (basename (status filename))
  end

  set -l cmd $argv[1]
  if contains "$cmd" create start start-worker smoke-test list controler-ip delete
    cmd_$cmd $argv[2..]
  else if test "$cmd" = up
    cmd_create $argv[2..]
    cmd_start $argv[2..]
  else
    echo "Unknown command: $cmd" >&2
    echo "See \`kubedee help\` for help" >&2
    exit 1
  end
end

main $argv